{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.4.1.14562",
      "templateHash": "13701948159885019128"
    }
  },
  "parameters": {
    "applicationName": {
      "type": "string",
      "defaultValue": "[format('CosmosBookStore{0}', uniqueString(resourceGroup().id))]",
      "maxLength": 30,
      "metadata": {
        "description": "CosmosBookstore"
      }
    },
    "appServicePlanTier": {
      "type": "string",
      "defaultValue": "S1",
      "metadata": {
        "description": "App Service Plan's pricing tier. Details at https://azure.microsoft.com/en-us/pricing/details/app-service/"
      },
      "allowedValues": [
        "F1",
        "D1",
        "B1",
        "B2",
        "B3",
        "S1",
        "S2",
        "S3",
        "P1",
        "P2",
        "P3",
        "P4"
      ]
    },
    "appServicePlanInstances": {
      "type": "int",
      "defaultValue": 1,
      "metadata": {
        "description": "App Service Plan's instance count"
      },
      "maxValue": 3,
      "minValue": 1
    },
    "repositoryUrl": {
      "type": "string",
      "defaultValue": " https://github.com/AbhinavTrips/azure-cosmosdb-nosql-api-nodejs-bookstore.git",
      "metadata": {
        "description": ""
      }
    },
    "branch": {
      "type": "string",
      "defaultValue": "master",
      "metadata": {
        "description": "The branch of the GitHub repository to use."
      }
    },
    "accountName": {
      "type": "string",
      "defaultValue": "[format('sql-{0}', uniqueString(resourceGroup().id))]",
      "metadata": {
        "description": "Azure Cosmos DB account name, max length 44 characters"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location for the Azure Cosmos DB account."
      }
    },
    "databaseName": {
      "type": "string",
      "defaultValue": "cosmosbookstore",
      "metadata": {
        "description": "The name for the NoSQL API database"
      }
    },
    "collection1Name": {
      "type": "string",
      "defaultValue": "books",
      "metadata": {
        "description": "The name for the first container"
      }
    },
    "collection2Name": {
      "type": "string",
      "defaultValue": "genres",
      "metadata": {
        "description": "The name for the second container"
      }
    },
    "throughput": {
      "type": "int",
      "defaultValue": 8000,
      "maxValue": 1000000,
      "minValue": 400,
      "metadata": {
        "description": "The shared throughput for the NoSQL database"
      }
    }
  },
  "variables": {
    "linuxFxVersion": "NODE|14-lts",
    "cosmosAccountName": "[toLower(parameters('applicationName'))]",
    "websiteName": "[parameters('applicationName')]",
    "hostingPlanName": "[parameters('applicationName')]",
    "alwaysOn": false
  },
  "resources": [
    {
      "type": "Microsoft.DocumentDB/databaseAccounts",
      "apiVersion": "2022-05-15",
      "name": "[toLower(parameters('accountName'))]",
      "location": "[parameters('location')]",
      "kind": "GlobalDocumentDB",
      "properties": {
        "consistencyPolicy": {
          "defaultConsistencyLevel": "Session"
        },
        "locations": [
          {
            "locationName": "[parameters('location')]",
            "failoverPriority": 0,
            "isZoneRedundant": false
          }
        ],
        "databaseAccountOfferType": "Standard"
      }
    },
    {
      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases",
      "apiVersion": "2022-05-15",
      "name": "[format('{0}/{1}', toLower(parameters('accountName')), parameters('databaseName'))]",
      "properties": {
        "resource": {
          "id": "[parameters('databaseName')]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts', toLower(parameters('accountName')))]"
      ]
    },
    {
      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
      "apiVersion": "2022-05-15",
      "name": "[format('{0}/{1}', format('{0}/{1}', toLower(parameters('accountName')), parameters('databaseName')), parameters('container1Name'))]",
      "properties": {
        "resource": {
          "id": "[parameters('container1Name')]",
          "partitionKey": {
            "paths": [
              "/_id"
            ],
            "kind": "Hash"
          }
        },
        "options": {
          "throughput": "[parameters('throughput')]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', split(format('{0}/{1}', toLower(parameters('accountName')), parameters('databaseName')), '/')[0], split(format('{0}/{1}', toLower(parameters('accountName')), parameters('databaseName')), '/')[1])]"
      ]
    },
    {
      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
      "apiVersion": "2022-05-15",
      "name": "[format('{0}/{1}', format('{0}/{1}', toLower(parameters('accountName')), parameters('databaseName')), parameters('container2Name'))]",
      "properties": {
        "resource": {
          "id": "[parameters('container2Name')]",
          "partitionKey": {
            "paths": [
              "/_id"
            ],
            "kind": "Hash"
          }
        },
        "options": {
          "throughput": "[parameters('throughput')]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', split(format('{0}/{1}', toLower(parameters('accountName')), parameters('databaseName')), '/')[0], split(format('{0}/{1}', toLower(parameters('accountName')), parameters('databaseName')), '/')[1])]"
      ]
    },
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2020-06-01",
      "kind": "linux",
      "name": "[variables('hostingPlanName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "[parameters('appServicePlanTier')]",
        "capacity": "[parameters('appServicePlanInstances')]"
      },
      "properties": {
        "reserved": true
      }
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2020-09-01",
      "name": "[variables('websiteName')]",
      "location": "[parameters('location')]",
      "properties": {
        "serverFarmId": "[variables('hostingPlanName')]",
        "siteConfig": {
          "linuxFxVersion": "[variables('linuxFxVersion')]",
          "alwaysOn": "[variables('alwaysOn')]",
          "appCommandLine": "pm2 start ecosystem.config.js --no-daemon"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmosAccountName'))]",
        "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]"
      ],
      "resources": [
        {
          "apiVersion": "2020-06-01",
          "name": "appsettings",
          "type": "config",
          "dependsOn": [
            "[resourceId('Microsoft.Web/Sites', variables('websiteName'))]",
            "[resourceId('Microsoft.Web/Sites/sourcecontrols', variables('websiteName'), 'web')]"
          ],
          "properties": {
            "WEBSITE_NODE_DEFAULT_VERSION": "14.0.0",
            "LOG_LEVEL": "log",
            "LOG_ENABLED": true,
            "COSMOS_BOOKSTORE_DB_CONNECTION_STRING": "[listConnectionStrings(resourceId('Microsoft.DocumentDB/databaseAccounts', toLower(parameters('applicationName'))), '2019-12-12').connectionStrings[0].connectionString]",
            "SEARCH_API_KEY": "",
            "SEARCH_API_ENDPOINT": "",
            "SEARCH_INDEX_NAME": "",
            "NODE_ENV": "production"
          }
        },
        {
          "name": "web",
          "type": "sourcecontrols",
          "apiVersion": "2020-06-01",
          "dependsOn": [
            "[resourceId('Microsoft.Web/Sites', variables('websiteName'))]"
          ],
          "properties": {
            "repoUrl": "[parameters('repositoryUrl')]",
            "branch": "[parameters('branch')]",
            "IsManualIntegration": true
          }
        }
      ]
    }
  ]
}
